diff --git a/src/libs/cache_lib.c b/src/libs/cache_lib.c
index 75c64a7..9482f66 100644
--- a/src/libs/cache_lib.c
+++ b/src/libs/cache_lib.c
@@ -133,6 +133,9 @@ void init_cache(Cache* cache, const char* name, uns cache_size, uns assoc,
       if(cache->repl_policy == REPL_SRRIP) {
         cache->entries[ii][jj].rrpv = cache->assoc-1;
       }
+      if(cache->repl_policy == REPL_LFU){
+          cache->entries[ii][jj].count = 0;
+      }
     }
 
     /* initialize the unsure lists (if necessary) */
@@ -288,6 +291,10 @@ void* cache_insert_replpos(Cache* cache, uns8 proc_id, Addr addr,
     insert_repl_policy = INSERT_REPL_SRRIP;
   }
 
+  if (cache->repl_policy == REPL_LFU) {
+        insert_repl_policy = INSERT_REPL_LFU;
+  }
+
   if(cache->repl_policy == REPL_IDEAL) {
     new_line        = insert_sure_line(cache, set, tag);
     *repl_line_addr = 0;
@@ -365,6 +372,9 @@ void* cache_insert_replpos(Cache* cache, uns8 proc_id, Addr addr,
     case INSERT_REPL_SRRIP:
       new_line->rrpv = cache->assoc - 2;
       break;
+      case INSERT_REPL_LFU:
+          new_line->count += 0;
+          break;
     default:
       ASSERT(0, FALSE);  // should never come here
   }
@@ -589,7 +599,21 @@ Cache_Entry* find_repl_entry(Cache* cache, uns8 proc_id, uns set, uns* way) {
         }
       }
     }  break;
+      case REPL_LFU: {
+          uns8 target_proc_id = 0;
+          uns min_count = 0xFFFFFF;
+
+          for (ii = 0; ii < cache->assoc; ii++) {
+              Cache_Entry *entry = &cache->entries[set][ii];
+              if (entry->count < min_count) {
+                  target_proc_id = ii;
+                  min_count = entry->count;
+              }
+          }
 
+          return &cache->entries[set][target_proc_id];
+
+      }
     default:
       ASSERT(0, FALSE);
   }
@@ -663,6 +687,11 @@ static inline void update_repl_policy(Cache* cache, Cache_Entry* cur_entry,
         cur_entry->rrpv--;
       }
       break;
+      case REPL_LFU: {
+          DEBUG(0, "cache hit, using LFU to update\n");
+          cur_entry->count ++;
+          break;
+      }
     default:
       ASSERT(0, FALSE);
   }
@@ -1051,6 +1080,8 @@ void reset_cache(Cache* cache) {
       cache->entries[ii][jj].valid = FALSE;
       if (cache->repl_policy == REPL_SRRIP) {
         cache->entries[ii][jj].rrpv = cache->assoc - 1;
+        cache->entries[ii][jj].count = 0;
+
       }
     }
   }
diff --git a/src/libs/cache_lib.h b/src/libs/cache_lib.h
index 39d4a96..45dbb75 100644
--- a/src/libs/cache_lib.h
+++ b/src/libs/cache_lib.h
@@ -55,6 +55,7 @@ typedef enum Repl_Policy_enum {
   REPL_MLP,           /* mlp based replacement  -- uses MLP_REPL_POLICY */
   REPL_PARTITION,     /* Based on the partition*/
   REPL_SRRIP,         /* rrip policy */
+  REPL_LFU,
   NUM_REPL
 } Repl_Policy;
 
@@ -70,6 +71,7 @@ typedef struct Cache_Entry_struct {
   Flag dirty; /* Dirty bit should have been here, however this is used only in
                  warmup now */
   uns8    rrpv;             /* value used in rrip replacement*/
+  uns count;    //for LFU
 } Cache_Entry;
 
 // DO NOT CHANGE THIS ORDER
@@ -81,6 +83,7 @@ typedef enum Cache_Insert_Repl_enum {
   INSERT_REPL_MID, /* Insert such that it is Middle(Roughly) of the repl order*/
   INSERT_REPL_MRU, /* Insert into MRU position */
   INSERT_REPL_SRRIP,
+  INSERT_REPL_LFU,
   NUM_INSERT_REPL
 } Cache_Insert_Repl;
 
